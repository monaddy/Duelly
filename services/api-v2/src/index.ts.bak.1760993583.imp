import "dotenv/config";
import rngVerifyRoute from './routes/rng-verify.js';
import Fastify from "fastify";
import helmet from "@fastify/helmet";
import cors from "@fastify/cors";
import rateLimit from "@fastify/rate-limit";
import { ZodError } from "zod";

import prismaPlugin from "./plugins/prisma.js";
import authRoutes from "./routes/auth.js";
import rngRoutes from "./routes/rng.js";
import paymentsRoutes from "./routes/payments.js";
import matchesRoutes from "./routes/matches.js";

const app = Fastify({ logger: { level: process.env.LOG_LEVEL ?? "info" } });

app.register(helmet, { contentSecurityPolicy: false });
app.register(cors, { origin: true, credentials: true });
app.register(rateLimit, { max: 300, timeWindow: "1 minute" });

app.register(prismaPlugin);
app.register(authRoutes,     { prefix: "/api/v2" });
app.register(matchesRoutes,  { prefix: "/api/v2" });
app.register(rngRoutes,      { prefix: "/api/v2" });
app.register(paymentsRoutes, { prefix: "/api/v2" });

app.get("/api/v2/health", async () => ({ ok: true }));

app.setErrorHandler((err, _req, reply) => {
  if (err instanceof ZodError) {
    return reply.code(400).send({ error: "bad_request", issues: err.issues });
  }
  const status = (err as any)?.statusCode ?? 500;
  const code   = (err as any)?.code ?? "internal_error";
  const msg    = (err as any)?.message ?? "Internal error";
  reply.code(status).send({ error: code, message: msg });
});


app.register(rngVerifyRoute, { prefix: '/api/v2' });

await app.listen({ port: Number(process.env.PORT ?? 3000), host: process.env.HOST ?? "0.0.0.0" });
app.log.info("API V2 listening (health @ /api/v2/health)");
