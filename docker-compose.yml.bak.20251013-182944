
name: backgammon-mini-app

networks:
  private:
    internal: true
  public:
    driver: bridge

volumes:
  pgdata:
  redisdata:
  certs:         # /etc/letsencrypt (populated by certbot outside compose)
  certbot-www:   # /.well-known/acme-challenge webroot (for HTTP-01)
  dhparam:       # optional: dhparam.pem if you enable TLS with custom params

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\""]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - private

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      sh -c "
      exec redis-server
        --appendonly yes
        --requirepass ${REDIS_PASSWORD}
        --maxmemory-policy allkeys-lru
      "
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redisdata:/data
    networks:
      - private

  wildbg:
    build:
      context: .
      dockerfile: services/wildbg/Dockerfile
    restart: unless-stopped
    environment:
      WILDBG_PORT: 9000
    expose:
      - "9000"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - private

  api:
    build:
      context: .
      dockerfile: services/api/Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      wildbg:
        condition: service_started
    environment:
      NODE_ENV: production
      API_HOST: 0.0.0.0
      API_PORT: ${API_PORT:-3000}
      # Database/Cache
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
      # External services
      WILDBG_URL: ${WILDBG_URL:-http://wildbg:9000}
      # Auth / Security
      JWT_SECRET: ${JWT_SECRET}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      # Telegram
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_PAYMENT_PROVIDER_TOKEN: ${TELEGRAM_PAYMENT_PROVIDER_TOKEN}
      # Commitâ€“reveal
      HMAC_SECRET: ${HMAC_SECRET}
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - private

  nginx:
    image: nginx:1.27-alpine
    restart: unless-stopped
    depends_on:
      api:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"   # Enable after obtaining certificates (see docs/SECURITY.md)
    volumes:
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./conf/nginx/sites-enabled/app.conf:/etc/nginx/conf.d/default.conf:ro
      - ./client/dist:/usr/share/nginx/html:ro
      - ./certbot-www:/var/www/certbot
      - ./certs:/etc/letsencrypt
      - dhparam:/etc/nginx/dhparam
    networks:
      - public
      - private
